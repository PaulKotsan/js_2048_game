{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["'use strict';\nvar $a5fd07fa01589658$exports = {};\n'use strict';\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.boardLayout = initialState;\n        // To create 2D Array and board related stuff. (IMPORTANT)\n        this.gameField = document.querySelector('.game-field');\n        this.fieldRows = Array.from(this.gameField.querySelectorAll('tr'));\n        this.emptyCells = [];\n        // Access  messages\n        this.startMessage = document.querySelector('.message-start');\n        this.loseMessage = document.querySelector('.message-lose');\n        this.winMessage = document.querySelector('.message-win');\n        this.totalScoreMessage = document.querySelector('.message-tatal__score');\n        // Access controls\n        this.controlButton = document.querySelector('.button');\n        this.cheatButton = document.querySelector('.cheat-button');\n        // Game utility\n        this.state = 'idle';\n        this.status = 'process';\n        // Player can move by default\n        this.canMove = true;\n        this.oppositeMoveDirections = {\n            left: 'right',\n            right: 'left',\n            up: 'down',\n            down: 'up'\n        };\n        this.lastMoveDirection = '';\n        this.countMoves = 0;\n    }\n    moveLeft() {\n        // Don't allow player to move unless...\n        this.canMove = false;\n        let moved = false;\n        this.boardLayout.forEach((row)=>{\n            // Merge\n            for(let i = 0; i < row.length - 1; i++)if (row[i] !== 0 && row[i] === row[i + 1]) {\n                row[i] *= 2;\n                row[i + 1] = 0;\n                // Allow player to move, cells were merged\n                this.canMove = true;\n                moved = true;\n            }\n            // Move numbers to the left\n            for(let i = 0; i < row.length; i++)if (row[i] === 0) {\n                // Iterate inside the row\n                for(let j = i + 1; j < row.length; j++)if (row[j] !== 0) {\n                    row[i] = row[j];\n                    row[j] = 0;\n                    // Allow player to move, cells were moved to the left\n                    this.canMove = true;\n                    moved = true;\n                    break;\n                }\n            }\n        });\n        if (this.lastMoveDirection && this.lastMoveDirection === this.oppositeMoveDirections['left']) this.canMove = true;\n        this.lastMoveDirection = 'left';\n        this.updateBoardDisplay();\n        return moved;\n    }\n    moveRight() {\n        // Don't allow player to move unless...\n        this.canMove = false;\n        let moved = false;\n        this.boardLayout.forEach((row)=>{\n            // Merge\n            for(let i = row.length - 2; i >= 0; i--)if (row[i] !== 0 && row[i] === row[i + 1]) {\n                row[i + 1] *= 2;\n                row[i] = 0;\n                // Allow player to move, cells were merged\n                this.canMove = true;\n                moved = true;\n            }\n            // Move numbers to the right\n            for(let i = row.length - 1; i >= 0; i--)if (row[i] === 0) {\n                for(let j = i - 1; j >= 0; j--)if (row[j] !== 0) {\n                    row[i] = row[j];\n                    row[j] = 0;\n                    // Allow player to move, cells were moved to the left\n                    this.canMove = true;\n                    moved = true;\n                    break;\n                }\n            }\n        });\n        if (this.lastMoveDirection && this.lastMoveDirection === this.oppositeMoveDirections['right']) this.canMove = true;\n        this.lastMoveDirection = 'left';\n        this.updateBoardDisplay();\n        return moved;\n    }\n    moveUp() {\n        let moved = false;\n        // Copy, will be used to compare change in the columns\n        const originalBoard = JSON.parse(JSON.stringify(this.boardLayout));\n        const columns = this.boardLayout[0].map((_, colIndex)=>this.boardLayout.map((row)=>row[colIndex]));\n        columns.forEach((column, colIndex)=>{\n            const newColumn = column.filter((num)=>num !== 0);\n            const mergedColumn = [];\n            for(let i = 0; i < newColumn.length; i++)if (newColumn[i] === newColumn[i + 1]) {\n                mergedColumn.push(newColumn[i] * 2);\n                moved = true;\n                i++;\n            } else mergedColumn.push(newColumn[i]);\n            // Fill the rest with the zeroes\n            while(mergedColumn.length < column.length)mergedColumn.push(0);\n            mergedColumn.forEach((value, rowIndex)=>{\n                this.boardLayout[rowIndex][colIndex] = value;\n            });\n            if (!this.areBoardsEqual(originalBoard, this.boardLayout)) moved = true;\n        });\n        return moved;\n    }\n    moveDown() {\n        let moved = false;\n        // Copy, will be used to compare change in the columns\n        const originalBoard = JSON.parse(JSON.stringify(this.boardLayout));\n        const columns = this.boardLayout[0].map((_, colIndex)=>this.boardLayout.map((row)=>row[colIndex]));\n        columns.forEach((column, colIndex)=>{\n            const newColumn = column.filter((num)=>num !== 0).reverse();\n            const mergedColumn = [];\n            for(let i = 0; i < newColumn.length; i++)if (newColumn[i] === newColumn[i + 1]) {\n                mergedColumn.push(newColumn[i] * 2);\n                moved = true;\n                i++;\n            } else mergedColumn.push(newColumn[i]);\n            while(mergedColumn.length < column.length)mergedColumn.push(0);\n            mergedColumn.reverse();\n            // Apply merged column to the game board\n            mergedColumn.forEach((value, rowIndex)=>{\n                this.boardLayout[rowIndex][colIndex] = value;\n            });\n            if (!this.areBoardsEqual(originalBoard, this.boardLayout)) moved = true;\n        });\n        return moved;\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        const gameScore = document.querySelector('.game-score');\n        const cellsScore = [];\n        this.boardLayout.forEach((row)=>{\n            const rowSum = row.reduce((init, currScore)=>init + currScore, 0);\n            cellsScore.push(rowSum);\n        });\n        gameScore.textContent = cellsScore.reduce((init, curr)=>init + curr, 0);\n        return gameScore.textContent;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        const controlHandler = ()=>{\n            if (this.getState() === 'idle') {\n                this.startGame();\n                this.state = 'playing';\n                this.controlButton.className = 'button restart';\n                this.controlButton.textContent = 'Restart';\n                this.startMessage.classList.add('hidden');\n            } else if (this.getState() === 'playing' || this.getState() === 'win' || this.getState() === 'lose') this.restart();\n        };\n        // Ensure only one event listener is attached\n        this.controlButton.removeEventListener('click', this.controlHandler);\n        this.controlButton.addEventListener('click', controlHandler);\n        // Save the handler to allow proper removal if needed later\n        this.controlHandler = controlHandler;\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.state = 'idle';\n        this.status = 'process';\n        this.startMessage.classList.remove('hidden');\n        // Hide all external messages.\n        this.winMessage.classList.add('hidden');\n        this.loseMessage.classList.add('hidden');\n        this.totalScoreMessage.classList.add('hidden');\n        this.controlButton.className = 'button start';\n        this.controlButton.textContent = 'Start';\n        // Reset all the cell's positions on the board\n        this.boardLayout = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.updateBoardDisplay();\n    }\n    // Add your own methods here ----------------------------------------------------------------------------------------------\n    // Method to start game\n    startGame() {\n        this.state = 'playing';\n        this.controlButton.className = 'button restart';\n        this.controlButton.textContent = 'Restart';\n        this.getScore();\n        this.initPLayerInput();\n        this.initCheats();\n        // Generate two random cells on the grid.\n        this.generateNewCells();\n        this.generateNewCells();\n    }\n    // Input stuff =======================================================================================================================\n    // Initialize inputs\n    initPLayerInput() {\n        // Remove existing event listeners\n        this.resetInput();\n        if (this.state === 'playing') this.bindPlayerInput();\n    }\n    initCheats() {\n        this.resetCheats();\n        if (this.state === 'playing') this.bindCheats();\n    }\n    bindPlayerInput() {\n        document.addEventListener('keydown', this.handleInput);\n    }\n    bindCheats() {\n        this.cheatButton.addEventListener('click', this.cheats);\n    }\n    resetInput() {\n        document.removeEventListener('keydown', this.handleInput);\n    }\n    resetCheats() {\n        this.cheatButton.removeEventListener('click', this.cheats);\n    }\n    handleInput = (e)=>{\n        if (this.state !== 'playing') return;\n        const key = e.key.toLowerCase();\n        const moved = (()=>{\n            switch(key){\n                case 'a':\n                    return this.moveLeft();\n                case 'd':\n                    return this.moveRight();\n                case 'w':\n                    return this.moveUp();\n                case 's':\n                    return this.moveDown();\n                default:\n                    return false;\n            }\n        })();\n        if (moved) {\n            this.generateNewCells();\n            this.getScore();\n            this.handleGameResolvment();\n            this.countMoves += 1;\n            this.lastMoveDirection = key;\n        }\n    };\n    cheats = ()=>{\n        if (this.state !== 'playing') return;\n        // Don't create extra cheat-menu containers\n        if (document.querySelector('.cheat-menu-container')) return;\n        // Create cheat menu.\n        const cheatMenu = document.createElement('form');\n        cheatMenu.className = 'cheat-menu-container';\n        const cheatMenuDesc = document.createElement('p');\n        cheatMenuDesc.innerHTML = 'I used this to test <span style=\"color: green;\">Win</span>/<span style=\"color: red;\">Lose</span> system.<br>You used this because you are a <span style=\"color: red;\">cheater</span>.<br>Its an open source game so you can add infinite money or whatever...<br>Add animations if you want, im not doing this...';\n        const labelWinOption = document.createElement('label');\n        labelWinOption.textContent = 'Win option: ';\n        const inputWinOption = document.createElement('select');\n        inputWinOption.className = 'cheat-menu__input';\n        const autoWin = document.createElement('option');\n        autoWin.text = 'Auto Win';\n        const autoLose = document.createElement('option');\n        autoLose.text = 'Auto Lose';\n        inputWinOption.add(autoWin);\n        inputWinOption.add(autoLose);\n        labelWinOption.appendChild(inputWinOption);\n        const applyButton = document.createElement('button');\n        applyButton.className = 'apply-cheat-button';\n        applyButton.type = 'button';\n        applyButton.textContent = 'Apply';\n        cheatMenu.appendChild(labelWinOption);\n        cheatMenu.appendChild(applyButton);\n        cheatMenu.appendChild(cheatMenuDesc);\n        document.body.appendChild(cheatMenu);\n        // Add event listener for the Apply button\n        applyButton.addEventListener('click', ()=>{\n            if (inputWinOption.value === 'Auto Win') {\n                this.boardLayout.forEach((row, rowIndex)=>{\n                    row.forEach((_, colIndex)=>{\n                        this.boardLayout[rowIndex][colIndex] = 2048;\n                    });\n                });\n                this.updateBoardDisplay();\n            } else if (inputWinOption.value === 'Auto Lose') {\n                this.boardLayout.forEach((row, rowIndex)=>{\n                    row.forEach((_, colIndex)=>{\n                        this.boardLayout[rowIndex][colIndex] = 0;\n                    });\n                });\n                this.updateBoardDisplay();\n                this.showLoseMessage();\n            }\n            // Remove cheat menu after applying\n            cheatMenu.remove();\n        });\n    };\n    // Generate number cells randomly\n    generateNewCells() {\n        const cellValue = Math.random() < 0.9 ? 2 : 4;\n        // Clear the emptyCells array before using it\n        this.emptyCells = [];\n        // Find all empty cells and store their positions in the emptyCells array\n        this.boardLayout.forEach((row, rowIndex)=>{\n            row.forEach((cell, colIndex)=>{\n                if (cell === 0) this.emptyCells.push({\n                    rowIndex: rowIndex,\n                    colIndex: colIndex\n                });\n            });\n        });\n        // Check if there are empty cells\n        if (this.emptyCells.length > 0) {\n            // Randomly select one empty cell\n            const randomIndex = Math.floor(Math.random() * this.emptyCells.length);\n            const { rowIndex: rowIndex, colIndex: colIndex } = this.emptyCells[randomIndex];\n            // Set the value to the randomly selected cell\n            this.boardLayout[rowIndex][colIndex] = cellValue;\n            // Update the DOM to reflect the change\n            this.updateBoardDisplay();\n        }\n    }\n    // Update Table (on page)\n    updateBoardDisplay() {\n        this.fieldRows.forEach((row, rowIndex)=>{\n            const cells = Array.from(row.children);\n            cells.forEach((cell, colIndex)=>{\n                const cellValue = this.boardLayout[rowIndex][colIndex];\n                cell.textContent = cellValue !== 0 ? cellValue : '';\n                cell.className = `field-cell field-cell--${cellValue}`;\n                // In case there is cell with 2048, show message immidietly\n                if (cellValue === 2048) {\n                    this.status = 'win';\n                    this.state = 'win';\n                    this.totalScoreMessage.innerHTML = `Your total score is: ${this.getScore()}<br>` + 'Moves made ' + this.countMoves;\n                    this.totalScoreMessage.classList.remove('hidden');\n                    this.showWinMessage();\n                }\n            });\n        });\n    }\n    areBoardsEqual(orgBoard, currentBoard) {\n        return JSON.stringify(orgBoard) === JSON.stringify(currentBoard);\n    }\n    showLoseMessage() {\n        this.loseMessage.classList.remove('hidden');\n    }\n    showWinMessage() {\n        this.winMessage.classList.remove('hidden');\n    }\n    handleGameResolvment() {\n        const losePromise = new Promise((resolve)=>{\n            const isLose = !this.boardLayout.some((row, rowIndex)=>row.some((cell, colIndex)=>{\n                    // Check if there is any move possible, left or right, or up or down\n                    return colIndex < row.length - 1 && row[colIndex] === row[colIndex + 1] || rowIndex < this.boardLayout.length - 1 && this.boardLayout[rowIndex][colIndex] === this.boardLayout[rowIndex + 1][colIndex];\n                }));\n            if (isLose) resolve('lose');\n        });\n        losePromise.then(()=>{\n            this.status = 'lose';\n            this.state = 'lose';\n            this.totalScoreMessage.innerHTML = `Your total score is: ${this.getScore()}<br>` + 'Moves made ' + this.countMoves;\n            this.totalScoreMessage.classList.remove('hidden');\n            this.showLoseMessage();\n        });\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n// Start the Game\n$09e991522ca7e64e$var$game.start();\n\n\n//# sourceMappingURL=index.48a53eff.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Start the Game\ngame.start();\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.boardLayout = initialState;\n\n    // To create 2D Array and board related stuff. (IMPORTANT)\n    this.gameField = document.querySelector('.game-field');\n    this.fieldRows = Array.from(this.gameField.querySelectorAll('tr'));\n\n    this.emptyCells = [];\n\n    // Access  messages\n    this.startMessage = document.querySelector('.message-start');\n    this.loseMessage = document.querySelector('.message-lose');\n    this.winMessage = document.querySelector('.message-win');\n    this.totalScoreMessage = document.querySelector('.message-tatal__score');\n\n    // Access controls\n    this.controlButton = document.querySelector('.button');\n    this.cheatButton = document.querySelector('.cheat-button');\n\n    // Game utility\n    this.state = 'idle';\n    this.status = 'process';\n\n    // Player can move by default\n    this.canMove = true;\n\n    this.oppositeMoveDirections = {\n      left: 'right',\n      right: 'left',\n      up: 'down',\n      down: 'up',\n    };\n    this.lastMoveDirection = '';\n    this.countMoves = 0;\n  }\n\n  moveLeft() {\n    // Don't allow player to move unless...\n    this.canMove = false;\n\n    let moved = false;\n\n    this.boardLayout.forEach((row) => {\n      // Merge\n      for (let i = 0; i < row.length - 1; i++) {\n        if (row[i] !== 0 && row[i] === row[i + 1]) {\n          row[i] *= 2;\n          row[i + 1] = 0;\n\n          // Allow player to move, cells were merged\n          this.canMove = true;\n          moved = true;\n        }\n      }\n\n      // Move numbers to the left\n      for (let i = 0; i < row.length; i++) {\n        if (row[i] === 0) {\n          // Iterate inside the row\n          for (let j = i + 1; j < row.length; j++) {\n            if (row[j] !== 0) {\n              row[i] = row[j];\n              row[j] = 0;\n\n              // Allow player to move, cells were moved to the left\n              this.canMove = true;\n              moved = true;\n              break;\n            }\n          }\n        }\n      }\n    });\n\n    if (\n      this.lastMoveDirection &&\n      this.lastMoveDirection === this.oppositeMoveDirections['left']\n    ) {\n      this.canMove = true;\n    }\n\n    this.lastMoveDirection = 'left';\n    this.updateBoardDisplay();\n\n    return moved;\n  }\n\n  moveRight() {\n    // Don't allow player to move unless...\n    this.canMove = false;\n\n    let moved = false;\n\n    this.boardLayout.forEach((row) => {\n      // Merge\n      for (let i = row.length - 2; i >= 0; i--) {\n        if (row[i] !== 0 && row[i] === row[i + 1]) {\n          row[i + 1] *= 2;\n          row[i] = 0;\n\n          // Allow player to move, cells were merged\n          this.canMove = true;\n          moved = true;\n        }\n      }\n\n      // Move numbers to the right\n      for (let i = row.length - 1; i >= 0; i--) {\n        if (row[i] === 0) {\n          for (let j = i - 1; j >= 0; j--) {\n            if (row[j] !== 0) {\n              row[i] = row[j];\n              row[j] = 0;\n\n              // Allow player to move, cells were moved to the left\n              this.canMove = true;\n              moved = true;\n              break;\n            }\n          }\n        }\n      }\n    });\n\n    if (\n      this.lastMoveDirection &&\n      this.lastMoveDirection === this.oppositeMoveDirections['right']\n    ) {\n      this.canMove = true;\n    }\n\n    this.lastMoveDirection = 'left';\n    this.updateBoardDisplay();\n\n    return moved;\n  }\n\n  moveUp() {\n    let moved = false;\n\n    // Copy, will be used to compare change in the columns\n    const originalBoard = JSON.parse(JSON.stringify(this.boardLayout));\n\n    const columns = this.boardLayout[0].map((_, colIndex) =>\n      this.boardLayout.map((row) => row[colIndex]));\n\n    columns.forEach((column, colIndex) => {\n      const newColumn = column.filter((num) => num !== 0);\n      const mergedColumn = [];\n\n      for (let i = 0; i < newColumn.length; i++) {\n        if (newColumn[i] === newColumn[i + 1]) {\n          mergedColumn.push(newColumn[i] * 2);\n          moved = true;\n          i++;\n        } else {\n          mergedColumn.push(newColumn[i]);\n        }\n      }\n\n      // Fill the rest with the zeroes\n      while (mergedColumn.length < column.length) {\n        mergedColumn.push(0);\n      }\n\n      mergedColumn.forEach((value, rowIndex) => {\n        this.boardLayout[rowIndex][colIndex] = value;\n      });\n\n      if (!this.areBoardsEqual(originalBoard, this.boardLayout)) {\n        moved = true;\n      }\n    });\n\n    return moved;\n  }\n\n  moveDown() {\n    let moved = false;\n\n    // Copy, will be used to compare change in the columns\n    const originalBoard = JSON.parse(JSON.stringify(this.boardLayout));\n\n    const columns = this.boardLayout[0].map((_, colIndex) =>\n      this.boardLayout.map((row) => row[colIndex]));\n\n    columns.forEach((column, colIndex) => {\n      const newColumn = column.filter((num) => num !== 0).reverse();\n      const mergedColumn = [];\n\n      for (let i = 0; i < newColumn.length; i++) {\n        if (newColumn[i] === newColumn[i + 1]) {\n          mergedColumn.push(newColumn[i] * 2);\n          moved = true;\n          i++;\n        } else {\n          mergedColumn.push(newColumn[i]);\n        }\n      }\n\n      while (mergedColumn.length < column.length) {\n        mergedColumn.push(0);\n      }\n\n      mergedColumn.reverse();\n\n      // Apply merged column to the game board\n      mergedColumn.forEach((value, rowIndex) => {\n        this.boardLayout[rowIndex][colIndex] = value;\n      });\n\n      if (!this.areBoardsEqual(originalBoard, this.boardLayout)) {\n        moved = true;\n      }\n    });\n\n    return moved;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    const gameScore = document.querySelector('.game-score');\n    const cellsScore = [];\n\n    this.boardLayout.forEach((row) => {\n      const rowSum = row.reduce((init, currScore) => init + currScore, 0);\n\n      cellsScore.push(rowSum);\n    });\n\n    gameScore.textContent = cellsScore.reduce((init, curr) => init + curr, 0);\n\n    return gameScore.textContent;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    const controlHandler = () => {\n      if (this.getState() === 'idle') {\n        this.startGame();\n        this.state = 'playing';\n        this.controlButton.className = 'button restart';\n        this.controlButton.textContent = 'Restart';\n        this.startMessage.classList.add('hidden');\n      } else if (\n        this.getState() === 'playing' ||\n        this.getState() === 'win' ||\n        this.getState() === 'lose'\n      ) {\n        this.restart();\n      }\n    };\n\n    // Ensure only one event listener is attached\n    this.controlButton.removeEventListener('click', this.controlHandler);\n    this.controlButton.addEventListener('click', controlHandler);\n\n    // Save the handler to allow proper removal if needed later\n    this.controlHandler = controlHandler;\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.state = 'idle';\n    this.status = 'process';\n    this.startMessage.classList.remove('hidden');\n\n    // Hide all external messages.\n    this.winMessage.classList.add('hidden');\n    this.loseMessage.classList.add('hidden');\n    this.totalScoreMessage.classList.add('hidden');\n\n    this.controlButton.className = 'button start';\n    this.controlButton.textContent = 'Start';\n\n    // Reset all the cell's positions on the board\n    this.boardLayout = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.updateBoardDisplay();\n  }\n\n  // Add your own methods here ----------------------------------------------------------------------------------------------\n\n  // Method to start game\n  startGame() {\n    this.state = 'playing';\n    this.controlButton.className = 'button restart';\n    this.controlButton.textContent = 'Restart';\n\n    this.getScore();\n    this.initPLayerInput();\n    this.initCheats();\n    // Generate two random cells on the grid.\n    this.generateNewCells();\n    this.generateNewCells();\n  }\n\n  // Input stuff =======================================================================================================================\n\n  // Initialize inputs\n  initPLayerInput() {\n    // Remove existing event listeners\n    this.resetInput();\n\n    if (this.state === 'playing') {\n      this.bindPlayerInput();\n    }\n  }\n\n  initCheats() {\n    this.resetCheats();\n\n    if (this.state === 'playing') {\n      this.bindCheats();\n    }\n  }\n\n  bindPlayerInput() {\n    document.addEventListener('keydown', this.handleInput);\n  }\n\n  bindCheats() {\n    this.cheatButton.addEventListener('click', this.cheats);\n  }\n\n  resetInput() {\n    document.removeEventListener('keydown', this.handleInput);\n  }\n\n  resetCheats() {\n    this.cheatButton.removeEventListener('click', this.cheats);\n  }\n\n  handleInput = (e) => {\n    if (this.state !== 'playing') {\n      return;\n    }\n\n    const key = e.key.toLowerCase();\n    const moved = (() => {\n      switch (key) {\n        case 'a':\n          return this.moveLeft();\n        case 'd':\n          return this.moveRight();\n        case 'w':\n          return this.moveUp();\n        case 's':\n          return this.moveDown();\n        default:\n          return false;\n      }\n    })();\n\n    if (moved) {\n      this.generateNewCells();\n      this.getScore();\n      this.handleGameResolvment();\n      this.countMoves += 1;\n      this.lastMoveDirection = key;\n    }\n  };\n\n  cheats = () => {\n    if (this.state !== 'playing') {\n      return;\n    }\n\n    // Don't create extra cheat-menu containers\n    if (document.querySelector('.cheat-menu-container')) {\n      return;\n    }\n\n    // Create cheat menu.\n    const cheatMenu = document.createElement('form');\n\n    cheatMenu.className = 'cheat-menu-container';\n\n    const cheatMenuDesc = document.createElement('p');\n\n    cheatMenuDesc.innerHTML =\n      'I used this to test <span style=\"color: green;\">Win</span>/<span style=\"color: red;\">Lose</span> system.<br>' +\n      'You used this because you are a <span style=\"color: red;\">cheater</span>.<br>' +\n      'Its an open source game so you can add infinite money or whatever...<br>' +\n      'Add animations if you want, im not doing this...';\n\n    const labelWinOption = document.createElement('label');\n\n    labelWinOption.textContent = 'Win option: ';\n\n    const inputWinOption = document.createElement('select');\n\n    inputWinOption.className = 'cheat-menu__input';\n\n    const autoWin = document.createElement('option');\n\n    autoWin.text = 'Auto Win';\n\n    const autoLose = document.createElement('option');\n\n    autoLose.text = 'Auto Lose';\n\n    inputWinOption.add(autoWin);\n    inputWinOption.add(autoLose);\n\n    labelWinOption.appendChild(inputWinOption);\n\n    const applyButton = document.createElement('button');\n\n    applyButton.className = 'apply-cheat-button';\n    applyButton.type = 'button';\n    applyButton.textContent = 'Apply';\n\n    cheatMenu.appendChild(labelWinOption);\n    cheatMenu.appendChild(applyButton);\n    cheatMenu.appendChild(cheatMenuDesc);\n    document.body.appendChild(cheatMenu);\n\n    // Add event listener for the Apply button\n    applyButton.addEventListener('click', () => {\n      if (inputWinOption.value === 'Auto Win') {\n        this.boardLayout.forEach((row, rowIndex) => {\n          row.forEach((_, colIndex) => {\n            this.boardLayout[rowIndex][colIndex] = 2048;\n          });\n        });\n        this.updateBoardDisplay();\n      } else if (inputWinOption.value === 'Auto Lose') {\n        this.boardLayout.forEach((row, rowIndex) => {\n          row.forEach((_, colIndex) => {\n            this.boardLayout[rowIndex][colIndex] = 0;\n          });\n        });\n        this.updateBoardDisplay();\n        this.showLoseMessage();\n      }\n\n      // Remove cheat menu after applying\n      cheatMenu.remove();\n    });\n  };\n\n  // Generate number cells randomly\n  generateNewCells() {\n    const cellValue = Math.random() < 0.9 ? 2 : 4;\n\n    // Clear the emptyCells array before using it\n    this.emptyCells = [];\n\n    // Find all empty cells and store their positions in the emptyCells array\n    this.boardLayout.forEach((row, rowIndex) => {\n      row.forEach((cell, colIndex) => {\n        if (cell === 0) {\n          this.emptyCells.push({ rowIndex, colIndex });\n        }\n      });\n    });\n\n    // Check if there are empty cells\n    if (this.emptyCells.length > 0) {\n      // Randomly select one empty cell\n      const randomIndex = Math.floor(Math.random() * this.emptyCells.length);\n      const { rowIndex, colIndex } = this.emptyCells[randomIndex];\n\n      // Set the value to the randomly selected cell\n      this.boardLayout[rowIndex][colIndex] = cellValue;\n\n      // Update the DOM to reflect the change\n      this.updateBoardDisplay();\n    }\n  }\n\n  // Update Table (on page)\n  updateBoardDisplay() {\n    this.fieldRows.forEach((row, rowIndex) => {\n      const cells = Array.from(row.children);\n\n      cells.forEach((cell, colIndex) => {\n        const cellValue = this.boardLayout[rowIndex][colIndex];\n\n        cell.textContent = cellValue !== 0 ? cellValue : '';\n        cell.className = `field-cell field-cell--${cellValue}`;\n\n        // In case there is cell with 2048, show message immidietly\n        if (cellValue === 2048) {\n          this.status = 'win';\n          this.state = 'win';\n          this.totalScoreMessage.innerHTML = `Your total score is: ${this.getScore()}<br>` + 'Moves made ' + this.countMoves;\n          this.totalScoreMessage.classList.remove('hidden');\n          this.showWinMessage();\n        }\n      });\n    });\n  }\n\n  areBoardsEqual(orgBoard, currentBoard) {\n    return JSON.stringify(orgBoard) === JSON.stringify(currentBoard);\n  }\n\n  showLoseMessage() {\n    this.loseMessage.classList.remove('hidden');\n  }\n\n  showWinMessage() {\n    this.winMessage.classList.remove('hidden');\n  }\n\n  handleGameResolvment() {\n    const losePromise = new Promise((resolve) => {\n      const isLose = !this.boardLayout.some((row, rowIndex) =>\n        row.some((cell, colIndex) => {\n          // Check if there is any move possible, left or right, or up or down\n          return (\n            (colIndex < row.length - 1 &&\n              row[colIndex] === row[colIndex + 1]) ||\n            (rowIndex < this.boardLayout.length - 1 &&\n              this.boardLayout[rowIndex][colIndex] ===\n                this.boardLayout[rowIndex + 1][colIndex])\n          );\n        }));\n\n      if (isLose) {\n        resolve('lose');\n      }\n    });\n\n    losePromise.then(() => {\n      this.status = 'lose';\n      this.state = 'lose';\n      this.totalScoreMessage.innerHTML = `Your total score is: ${this.getScore()}<br>` + 'Moves made ' + this.countMoves;\n      this.totalScoreMessage.classList.remove('hidden');\n      this.showLoseMessage();\n    });\n  }\n}\n\nmodule.exports = Game;\n"],"names":["constructor","initialState","boardLayout","gameField","document","querySelector","fieldRows","Array","from","querySelectorAll","emptyCells","startMessage","loseMessage","winMessage","totalScoreMessage","controlButton","cheatButton","state","status","canMove","oppositeMoveDirections","left","right","up","down","lastMoveDirection","countMoves","moveLeft","moved","forEach","row","i","length","j","updateBoardDisplay","moveRight","moveUp","originalBoard","JSON","parse","stringify","columns","map","_","colIndex","column","newColumn","filter","num","mergedColumn","push","value","rowIndex","areBoardsEqual","moveDown","reverse","getScore","gameScore","cellsScore","rowSum","reduce","init","currScore","textContent","curr","getState","getStatus","start","controlHandler","startGame","className","classList","add","restart","removeEventListener","addEventListener","remove","initPLayerInput","initCheats","generateNewCells","resetInput","bindPlayerInput","resetCheats","bindCheats","handleInput","cheats","e","key","toLowerCase","handleGameResolvment","cheatMenu","createElement","cheatMenuDesc","innerHTML","labelWinOption","inputWinOption","autoWin","text","autoLose","appendChild","applyButton","type","body","showLoseMessage","cellValue","Math","random","cell","randomIndex","floor","cells","children","showWinMessage","orgBoard","currentBoard","losePromise","Promise","resolve","some","then"],"version":3,"file":"index.48a53eff.js.map"}