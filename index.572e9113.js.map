{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_define_property.js"],"sourcesContent":["(function () {\n'use strict';\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $cd5a47cf8ef6d766$export$71511d61b312f219(obj, key, value) {\n    if (key in obj) Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    });\n    else obj[key] = value;\n    return obj;\n}\n\n\n'use strict';\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var _this = this;\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        (0, $cd5a47cf8ef6d766$export$71511d61b312f219)(this, \"handleInput\", function(e) {\n            if (_this.state !== 'playing') return;\n            var key = e.key.toLowerCase();\n            var moved = function() {\n                switch(key){\n                    case 'a':\n                        return _this.moveLeft();\n                    case 'd':\n                        return _this.moveRight();\n                    case 'w':\n                        return _this.moveUp();\n                    case 's':\n                        return _this.moveDown();\n                    default:\n                        return false;\n                }\n            }();\n            if (moved) {\n                _this.generateNewCells();\n                _this.getScore();\n                _this.handleGameResolvment();\n                _this.countMoves += 1;\n                _this.lastMoveDirection = key;\n            }\n        });\n        (0, $cd5a47cf8ef6d766$export$71511d61b312f219)(this, \"cheats\", function() {\n            if (_this.state !== 'playing') return;\n            // Don't create extra cheat-menu containers\n            if (document.querySelector('.cheat-menu-container')) return;\n            // Create cheat menu.\n            var cheatMenu = document.createElement('form');\n            cheatMenu.className = 'cheat-menu-container';\n            var cheatMenuDesc = document.createElement('p');\n            cheatMenuDesc.innerHTML = 'I used this to test <span style=\"color: green;\">Win</span>/<span style=\"color: red;\">Lose</span> system.<br>You used this because you are a <span style=\"color: red;\">cheater</span>.<br>Its an open source game so you can add infinite money or whatever...<br>Add animations if you want, im not doing this...';\n            var labelWinOption = document.createElement('label');\n            labelWinOption.textContent = 'Win option: ';\n            var inputWinOption = document.createElement('select');\n            inputWinOption.className = 'cheat-menu__input';\n            var autoWin = document.createElement('option');\n            autoWin.text = 'Auto Win';\n            var autoLose = document.createElement('option');\n            autoLose.text = 'Auto Lose';\n            inputWinOption.add(autoWin);\n            inputWinOption.add(autoLose);\n            labelWinOption.appendChild(inputWinOption);\n            var applyButton = document.createElement('button');\n            applyButton.className = 'apply-cheat-button';\n            applyButton.type = 'button';\n            applyButton.textContent = 'Apply';\n            cheatMenu.appendChild(labelWinOption);\n            cheatMenu.appendChild(applyButton);\n            cheatMenu.appendChild(cheatMenuDesc);\n            document.body.appendChild(cheatMenu);\n            // Add event listener for the Apply button\n            applyButton.addEventListener('click', function() {\n                if (inputWinOption.value === 'Auto Win') {\n                    _this.boardLayout.forEach(function(row, rowIndex) {\n                        row.forEach(function(_, colIndex) {\n                            _this.boardLayout[rowIndex][colIndex] = 2048;\n                        });\n                    });\n                    _this.updateBoardDisplay();\n                } else if (inputWinOption.value === 'Auto Lose') {\n                    _this.boardLayout.forEach(function(row, rowIndex) {\n                        row.forEach(function(_, colIndex) {\n                            _this.boardLayout[rowIndex][colIndex] = 0;\n                        });\n                    });\n                    _this.updateBoardDisplay();\n                    _this.showLoseMessage();\n                }\n                // Remove cheat menu after applying\n                cheatMenu.remove();\n            });\n        });\n        this.boardLayout = initialState;\n        // To create 2D Array and board related stuff. (IMPORTANT)\n        this.gameField = document.querySelector('.game-field');\n        this.fieldRows = Array.from(this.gameField.querySelectorAll('tr'));\n        this.emptyCells = [];\n        // Access  messages\n        this.startMessage = document.querySelector('.message-start');\n        this.loseMessage = document.querySelector('.message-lose');\n        this.winMessage = document.querySelector('.message-win');\n        this.totalScoreMessage = document.querySelector('.message-tatal__score');\n        // Access controls\n        this.controlButton = document.querySelector('.button');\n        this.cheatButton = document.querySelector('.cheat-button');\n        // Game utility\n        this.state = 'idle';\n        this.status = 'process';\n        // Player can move by default\n        this.canMove = true;\n        this.oppositeMoveDirections = {\n            left: 'right',\n            right: 'left',\n            up: 'down',\n            down: 'up'\n        };\n        this.lastMoveDirection = '';\n        this.countMoves = 0;\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this;\n                // Don't allow player to move unless...\n                this.canMove = false;\n                var moved = false;\n                this.boardLayout.forEach(function(row) {\n                    // Merge\n                    for(var i = 0; i < row.length - 1; i++)if (row[i] !== 0 && row[i] === row[i + 1]) {\n                        row[i] *= 2;\n                        row[i + 1] = 0;\n                        // Allow player to move, cells were merged\n                        _this.canMove = true;\n                        moved = true;\n                    }\n                    // Move numbers to the left\n                    for(var i1 = 0; i1 < row.length; i1++)if (row[i1] === 0) {\n                        // Iterate inside the row\n                        for(var j = i1 + 1; j < row.length; j++)if (row[j] !== 0) {\n                            row[i1] = row[j];\n                            row[j] = 0;\n                            // Allow player to move, cells were moved to the left\n                            _this.canMove = true;\n                            moved = true;\n                            break;\n                        }\n                    }\n                });\n                if (this.lastMoveDirection && this.lastMoveDirection === this.oppositeMoveDirections['left']) this.canMove = true;\n                this.lastMoveDirection = 'left';\n                this.updateBoardDisplay();\n                return moved;\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this;\n                // Don't allow player to move unless...\n                this.canMove = false;\n                var moved = false;\n                this.boardLayout.forEach(function(row) {\n                    // Merge\n                    for(var i = row.length - 2; i >= 0; i--)if (row[i] !== 0 && row[i] === row[i + 1]) {\n                        row[i + 1] *= 2;\n                        row[i] = 0;\n                        // Allow player to move, cells were merged\n                        _this.canMove = true;\n                        moved = true;\n                    }\n                    // Move numbers to the right\n                    for(var i1 = row.length - 1; i1 >= 0; i1--)if (row[i1] === 0) {\n                        for(var j = i1 - 1; j >= 0; j--)if (row[j] !== 0) {\n                            row[i1] = row[j];\n                            row[j] = 0;\n                            // Allow player to move, cells were moved to the left\n                            _this.canMove = true;\n                            moved = true;\n                            break;\n                        }\n                    }\n                });\n                if (this.lastMoveDirection && this.lastMoveDirection === this.oppositeMoveDirections['right']) this.canMove = true;\n                this.lastMoveDirection = 'left';\n                this.updateBoardDisplay();\n                return moved;\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this;\n                var moved = false;\n                // Copy, will be used to compare change in the columns\n                var originalBoard = JSON.parse(JSON.stringify(this.boardLayout));\n                var columns = this.boardLayout[0].map(function(_, colIndex) {\n                    return _this.boardLayout.map(function(row) {\n                        return row[colIndex];\n                    });\n                });\n                columns.forEach(function(column, colIndex) {\n                    var newColumn = column.filter(function(num) {\n                        return num !== 0;\n                    });\n                    var mergedColumn = [];\n                    for(var i = 0; i < newColumn.length; i++)if (newColumn[i] === newColumn[i + 1]) {\n                        mergedColumn.push(newColumn[i] * 2);\n                        moved = true;\n                        i++;\n                    } else mergedColumn.push(newColumn[i]);\n                    // Fill the rest with the zeroes\n                    while(mergedColumn.length < column.length)mergedColumn.push(0);\n                    mergedColumn.forEach(function(value, rowIndex) {\n                        _this.boardLayout[rowIndex][colIndex] = value;\n                    });\n                    if (!_this.areBoardsEqual(originalBoard, _this.boardLayout)) moved = true;\n                });\n                return moved;\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this;\n                var moved = false;\n                // Copy, will be used to compare change in the columns\n                var originalBoard = JSON.parse(JSON.stringify(this.boardLayout));\n                var columns = this.boardLayout[0].map(function(_, colIndex) {\n                    return _this.boardLayout.map(function(row) {\n                        return row[colIndex];\n                    });\n                });\n                columns.forEach(function(column, colIndex) {\n                    var newColumn = column.filter(function(num) {\n                        return num !== 0;\n                    }).reverse();\n                    var mergedColumn = [];\n                    for(var i = 0; i < newColumn.length; i++)if (newColumn[i] === newColumn[i + 1]) {\n                        mergedColumn.push(newColumn[i] * 2);\n                        moved = true;\n                        i++;\n                    } else mergedColumn.push(newColumn[i]);\n                    while(mergedColumn.length < column.length)mergedColumn.push(0);\n                    mergedColumn.reverse();\n                    // Apply merged column to the game board\n                    mergedColumn.forEach(function(value, rowIndex) {\n                        _this.boardLayout[rowIndex][colIndex] = value;\n                    });\n                    if (!_this.areBoardsEqual(originalBoard, _this.boardLayout)) moved = true;\n                });\n                return moved;\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                var gameScore = document.querySelector('.game-score');\n                var cellsScore = [];\n                this.boardLayout.forEach(function(row) {\n                    var rowSum = row.reduce(function(init, currScore) {\n                        return init + currScore;\n                    }, 0);\n                    cellsScore.push(rowSum);\n                });\n                gameScore.textContent = cellsScore.reduce(function(init, curr) {\n                    return init + curr;\n                }, 0);\n                return gameScore.textContent;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.state;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                var _this = this;\n                var controlHandler = function() {\n                    if (_this.getState() === 'idle') {\n                        _this.startGame();\n                        _this.state = 'playing';\n                        _this.controlButton.className = 'button restart';\n                        _this.controlButton.textContent = 'Restart';\n                        _this.startMessage.classList.add('hidden');\n                    } else if (_this.getState() === 'playing' || _this.getState() === 'win' || _this.getState() === 'lose') _this.restart();\n                };\n                // Ensure only one event listener is attached\n                this.controlButton.removeEventListener('click', this.controlHandler);\n                this.controlButton.addEventListener('click', controlHandler);\n                // Save the handler to allow proper removal if needed later\n                this.controlHandler = controlHandler;\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.state = 'idle';\n                this.status = 'process';\n                this.startMessage.classList.remove('hidden');\n                // Hide all external messages.\n                this.winMessage.classList.add('hidden');\n                this.loseMessage.classList.add('hidden');\n                this.totalScoreMessage.classList.add('hidden');\n                this.controlButton.className = 'button start';\n                this.controlButton.textContent = 'Start';\n                // Reset all the cell's positions on the board\n                this.boardLayout = [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n                this.updateBoardDisplay();\n            }\n        },\n        {\n            // Add your own methods here ----------------------------------------------------------------------------------------------\n            // Method to start game\n            key: \"startGame\",\n            value: function startGame() {\n                this.state = 'playing';\n                this.controlButton.className = 'button restart';\n                this.controlButton.textContent = 'Restart';\n                this.getScore();\n                this.initPLayerInput();\n                this.initCheats();\n                // Generate two random cells on the grid.\n                this.generateNewCells();\n                this.generateNewCells();\n            }\n        },\n        {\n            // Input stuff =======================================================================================================================\n            // Initialize inputs\n            key: \"initPLayerInput\",\n            value: function initPLayerInput() {\n                // Remove existing event listeners\n                this.resetInput();\n                if (this.state === 'playing') this.bindPlayerInput();\n            }\n        },\n        {\n            key: \"initCheats\",\n            value: function initCheats() {\n                this.resetCheats();\n                if (this.state === 'playing') this.bindCheats();\n            }\n        },\n        {\n            key: \"bindPlayerInput\",\n            value: function bindPlayerInput() {\n                document.addEventListener('keydown', this.handleInput);\n            }\n        },\n        {\n            key: \"bindCheats\",\n            value: function bindCheats() {\n                this.cheatButton.addEventListener('click', this.cheats);\n            }\n        },\n        {\n            key: \"resetInput\",\n            value: function resetInput() {\n                document.removeEventListener('keydown', this.handleInput);\n            }\n        },\n        {\n            key: \"resetCheats\",\n            value: function resetCheats() {\n                this.cheatButton.removeEventListener('click', this.cheats);\n            }\n        },\n        {\n            // Generate number cells randomly\n            key: \"generateNewCells\",\n            value: function generateNewCells() {\n                var _this = this;\n                var cellValue = Math.random() < 0.9 ? 2 : 4;\n                // Clear the emptyCells array before using it\n                this.emptyCells = [];\n                // Find all empty cells and store their positions in the emptyCells array\n                this.boardLayout.forEach(function(row, rowIndex) {\n                    row.forEach(function(cell, colIndex) {\n                        if (cell === 0) _this.emptyCells.push({\n                            rowIndex: rowIndex,\n                            colIndex: colIndex\n                        });\n                    });\n                });\n                // Check if there are empty cells\n                if (this.emptyCells.length > 0) {\n                    // Randomly select one empty cell\n                    var randomIndex = Math.floor(Math.random() * this.emptyCells.length);\n                    var _this_emptyCells_randomIndex = this.emptyCells[randomIndex], rowIndex = _this_emptyCells_randomIndex.rowIndex, colIndex = _this_emptyCells_randomIndex.colIndex;\n                    // Set the value to the randomly selected cell\n                    this.boardLayout[rowIndex][colIndex] = cellValue;\n                    // Update the DOM to reflect the change\n                    this.updateBoardDisplay();\n                }\n            }\n        },\n        {\n            // Update Table (on page)\n            key: \"updateBoardDisplay\",\n            value: function updateBoardDisplay() {\n                var _this = this;\n                this.fieldRows.forEach(function(row, rowIndex) {\n                    var cells = Array.from(row.children);\n                    cells.forEach(function(cell, colIndex) {\n                        var cellValue = _this.boardLayout[rowIndex][colIndex];\n                        cell.textContent = cellValue !== 0 ? cellValue : '';\n                        cell.className = \"field-cell field-cell--\".concat(cellValue);\n                        // In case there is cell with 2048, show message immidietly\n                        if (cellValue === 2048) {\n                            _this.status = 'win';\n                            _this.state = 'win';\n                            _this.totalScoreMessage.innerHTML = \"Your total score is: \".concat(_this.getScore(), \"<br>\") + 'Moves made ' + _this.countMoves;\n                            _this.totalScoreMessage.classList.remove('hidden');\n                            _this.showWinMessage();\n                        }\n                    });\n                });\n            }\n        },\n        {\n            key: \"areBoardsEqual\",\n            value: function areBoardsEqual(orgBoard, currentBoard) {\n                return JSON.stringify(orgBoard) === JSON.stringify(currentBoard);\n            }\n        },\n        {\n            key: \"showLoseMessage\",\n            value: function showLoseMessage() {\n                this.loseMessage.classList.remove('hidden');\n            }\n        },\n        {\n            key: \"showWinMessage\",\n            value: function showWinMessage() {\n                this.winMessage.classList.remove('hidden');\n            }\n        },\n        {\n            key: \"handleGameResolvment\",\n            value: function handleGameResolvment() {\n                var _this = this;\n                var losePromise = new Promise(function(resolve) {\n                    var isLose = !_this.boardLayout.some(function(row, rowIndex) {\n                        return row.some(function(cell, colIndex) {\n                            // Check if there is any move possible, left or right, or up or down\n                            return colIndex < row.length - 1 && row[colIndex] === row[colIndex + 1] || rowIndex < _this.boardLayout.length - 1 && _this.boardLayout[rowIndex][colIndex] === _this.boardLayout[rowIndex + 1][colIndex];\n                        });\n                    });\n                    if (isLose) resolve('lose');\n                });\n                losePromise.then(function() {\n                    _this.status = 'lose';\n                    _this.state = 'lose';\n                    _this.totalScoreMessage.innerHTML = \"Your total score is: \".concat(_this.getScore(), \"<br>\") + 'Moves made ' + _this.countMoves;\n                    _this.totalScoreMessage.classList.remove('hidden');\n                    _this.showLoseMessage();\n                });\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\n// Start the Game\n$197cd56b15c33885$var$game.start();\n\n})();\n//# sourceMappingURL=index.572e9113.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Start the Game\ngame.start();\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.boardLayout = initialState;\n\n    // To create 2D Array and board related stuff. (IMPORTANT)\n    this.gameField = document.querySelector('.game-field');\n    this.fieldRows = Array.from(this.gameField.querySelectorAll('tr'));\n\n    this.emptyCells = [];\n\n    // Access  messages\n    this.startMessage = document.querySelector('.message-start');\n    this.loseMessage = document.querySelector('.message-lose');\n    this.winMessage = document.querySelector('.message-win');\n    this.totalScoreMessage = document.querySelector('.message-tatal__score');\n\n    // Access controls\n    this.controlButton = document.querySelector('.button');\n    this.cheatButton = document.querySelector('.cheat-button');\n\n    // Game utility\n    this.state = 'idle';\n    this.status = 'process';\n\n    // Player can move by default\n    this.canMove = true;\n\n    this.oppositeMoveDirections = {\n      left: 'right',\n      right: 'left',\n      up: 'down',\n      down: 'up',\n    };\n    this.lastMoveDirection = '';\n    this.countMoves = 0;\n  }\n\n  moveLeft() {\n    // Don't allow player to move unless...\n    this.canMove = false;\n\n    let moved = false;\n\n    this.boardLayout.forEach((row) => {\n      // Merge\n      for (let i = 0; i < row.length - 1; i++) {\n        if (row[i] !== 0 && row[i] === row[i + 1]) {\n          row[i] *= 2;\n          row[i + 1] = 0;\n\n          // Allow player to move, cells were merged\n          this.canMove = true;\n          moved = true;\n        }\n      }\n\n      // Move numbers to the left\n      for (let i = 0; i < row.length; i++) {\n        if (row[i] === 0) {\n          // Iterate inside the row\n          for (let j = i + 1; j < row.length; j++) {\n            if (row[j] !== 0) {\n              row[i] = row[j];\n              row[j] = 0;\n\n              // Allow player to move, cells were moved to the left\n              this.canMove = true;\n              moved = true;\n              break;\n            }\n          }\n        }\n      }\n    });\n\n    if (\n      this.lastMoveDirection &&\n      this.lastMoveDirection === this.oppositeMoveDirections['left']\n    ) {\n      this.canMove = true;\n    }\n\n    this.lastMoveDirection = 'left';\n    this.updateBoardDisplay();\n\n    return moved;\n  }\n\n  moveRight() {\n    // Don't allow player to move unless...\n    this.canMove = false;\n\n    let moved = false;\n\n    this.boardLayout.forEach((row) => {\n      // Merge\n      for (let i = row.length - 2; i >= 0; i--) {\n        if (row[i] !== 0 && row[i] === row[i + 1]) {\n          row[i + 1] *= 2;\n          row[i] = 0;\n\n          // Allow player to move, cells were merged\n          this.canMove = true;\n          moved = true;\n        }\n      }\n\n      // Move numbers to the right\n      for (let i = row.length - 1; i >= 0; i--) {\n        if (row[i] === 0) {\n          for (let j = i - 1; j >= 0; j--) {\n            if (row[j] !== 0) {\n              row[i] = row[j];\n              row[j] = 0;\n\n              // Allow player to move, cells were moved to the left\n              this.canMove = true;\n              moved = true;\n              break;\n            }\n          }\n        }\n      }\n    });\n\n    if (\n      this.lastMoveDirection &&\n      this.lastMoveDirection === this.oppositeMoveDirections['right']\n    ) {\n      this.canMove = true;\n    }\n\n    this.lastMoveDirection = 'left';\n    this.updateBoardDisplay();\n\n    return moved;\n  }\n\n  moveUp() {\n    let moved = false;\n\n    // Copy, will be used to compare change in the columns\n    const originalBoard = JSON.parse(JSON.stringify(this.boardLayout));\n\n    const columns = this.boardLayout[0].map((_, colIndex) =>\n      this.boardLayout.map((row) => row[colIndex]));\n\n    columns.forEach((column, colIndex) => {\n      const newColumn = column.filter((num) => num !== 0);\n      const mergedColumn = [];\n\n      for (let i = 0; i < newColumn.length; i++) {\n        if (newColumn[i] === newColumn[i + 1]) {\n          mergedColumn.push(newColumn[i] * 2);\n          moved = true;\n          i++;\n        } else {\n          mergedColumn.push(newColumn[i]);\n        }\n      }\n\n      // Fill the rest with the zeroes\n      while (mergedColumn.length < column.length) {\n        mergedColumn.push(0);\n      }\n\n      mergedColumn.forEach((value, rowIndex) => {\n        this.boardLayout[rowIndex][colIndex] = value;\n      });\n\n      if (!this.areBoardsEqual(originalBoard, this.boardLayout)) {\n        moved = true;\n      }\n    });\n\n    return moved;\n  }\n\n  moveDown() {\n    let moved = false;\n\n    // Copy, will be used to compare change in the columns\n    const originalBoard = JSON.parse(JSON.stringify(this.boardLayout));\n\n    const columns = this.boardLayout[0].map((_, colIndex) =>\n      this.boardLayout.map((row) => row[colIndex]));\n\n    columns.forEach((column, colIndex) => {\n      const newColumn = column.filter((num) => num !== 0).reverse();\n      const mergedColumn = [];\n\n      for (let i = 0; i < newColumn.length; i++) {\n        if (newColumn[i] === newColumn[i + 1]) {\n          mergedColumn.push(newColumn[i] * 2);\n          moved = true;\n          i++;\n        } else {\n          mergedColumn.push(newColumn[i]);\n        }\n      }\n\n      while (mergedColumn.length < column.length) {\n        mergedColumn.push(0);\n      }\n\n      mergedColumn.reverse();\n\n      // Apply merged column to the game board\n      mergedColumn.forEach((value, rowIndex) => {\n        this.boardLayout[rowIndex][colIndex] = value;\n      });\n\n      if (!this.areBoardsEqual(originalBoard, this.boardLayout)) {\n        moved = true;\n      }\n    });\n\n    return moved;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    const gameScore = document.querySelector('.game-score');\n    const cellsScore = [];\n\n    this.boardLayout.forEach((row) => {\n      const rowSum = row.reduce((init, currScore) => init + currScore, 0);\n\n      cellsScore.push(rowSum);\n    });\n\n    gameScore.textContent = cellsScore.reduce((init, curr) => init + curr, 0);\n\n    return gameScore.textContent;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    const controlHandler = () => {\n      if (this.getState() === 'idle') {\n        this.startGame();\n        this.state = 'playing';\n        this.controlButton.className = 'button restart';\n        this.controlButton.textContent = 'Restart';\n        this.startMessage.classList.add('hidden');\n      } else if (\n        this.getState() === 'playing' ||\n        this.getState() === 'win' ||\n        this.getState() === 'lose'\n      ) {\n        this.restart();\n      }\n    };\n\n    // Ensure only one event listener is attached\n    this.controlButton.removeEventListener('click', this.controlHandler);\n    this.controlButton.addEventListener('click', controlHandler);\n\n    // Save the handler to allow proper removal if needed later\n    this.controlHandler = controlHandler;\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.state = 'idle';\n    this.status = 'process';\n    this.startMessage.classList.remove('hidden');\n\n    // Hide all external messages.\n    this.winMessage.classList.add('hidden');\n    this.loseMessage.classList.add('hidden');\n    this.totalScoreMessage.classList.add('hidden');\n\n    this.controlButton.className = 'button start';\n    this.controlButton.textContent = 'Start';\n\n    // Reset all the cell's positions on the board\n    this.boardLayout = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.updateBoardDisplay();\n  }\n\n  // Add your own methods here ----------------------------------------------------------------------------------------------\n\n  // Method to start game\n  startGame() {\n    this.state = 'playing';\n    this.controlButton.className = 'button restart';\n    this.controlButton.textContent = 'Restart';\n\n    this.getScore();\n    this.initPLayerInput();\n    this.initCheats();\n    // Generate two random cells on the grid.\n    this.generateNewCells();\n    this.generateNewCells();\n  }\n\n  // Input stuff =======================================================================================================================\n\n  // Initialize inputs\n  initPLayerInput() {\n    // Remove existing event listeners\n    this.resetInput();\n\n    if (this.state === 'playing') {\n      this.bindPlayerInput();\n    }\n  }\n\n  initCheats() {\n    this.resetCheats();\n\n    if (this.state === 'playing') {\n      this.bindCheats();\n    }\n  }\n\n  bindPlayerInput() {\n    document.addEventListener('keydown', this.handleInput);\n  }\n\n  bindCheats() {\n    this.cheatButton.addEventListener('click', this.cheats);\n  }\n\n  resetInput() {\n    document.removeEventListener('keydown', this.handleInput);\n  }\n\n  resetCheats() {\n    this.cheatButton.removeEventListener('click', this.cheats);\n  }\n\n  handleInput = (e) => {\n    if (this.state !== 'playing') {\n      return;\n    }\n\n    const key = e.key.toLowerCase();\n    const moved = (() => {\n      switch (key) {\n        case 'a':\n          return this.moveLeft();\n        case 'd':\n          return this.moveRight();\n        case 'w':\n          return this.moveUp();\n        case 's':\n          return this.moveDown();\n        default:\n          return false;\n      }\n    })();\n\n    if (moved) {\n      this.generateNewCells();\n      this.getScore();\n      this.handleGameResolvment();\n      this.countMoves += 1;\n      this.lastMoveDirection = key;\n    }\n  };\n\n  cheats = () => {\n    if (this.state !== 'playing') {\n      return;\n    }\n\n    // Don't create extra cheat-menu containers\n    if (document.querySelector('.cheat-menu-container')) {\n      return;\n    }\n\n    // Create cheat menu.\n    const cheatMenu = document.createElement('form');\n\n    cheatMenu.className = 'cheat-menu-container';\n\n    const cheatMenuDesc = document.createElement('p');\n\n    cheatMenuDesc.innerHTML =\n      'I used this to test <span style=\"color: green;\">Win</span>/<span style=\"color: red;\">Lose</span> system.<br>' +\n      'You used this because you are a <span style=\"color: red;\">cheater</span>.<br>' +\n      'Its an open source game so you can add infinite money or whatever...<br>' +\n      'Add animations if you want, im not doing this...';\n\n    const labelWinOption = document.createElement('label');\n\n    labelWinOption.textContent = 'Win option: ';\n\n    const inputWinOption = document.createElement('select');\n\n    inputWinOption.className = 'cheat-menu__input';\n\n    const autoWin = document.createElement('option');\n\n    autoWin.text = 'Auto Win';\n\n    const autoLose = document.createElement('option');\n\n    autoLose.text = 'Auto Lose';\n\n    inputWinOption.add(autoWin);\n    inputWinOption.add(autoLose);\n\n    labelWinOption.appendChild(inputWinOption);\n\n    const applyButton = document.createElement('button');\n\n    applyButton.className = 'apply-cheat-button';\n    applyButton.type = 'button';\n    applyButton.textContent = 'Apply';\n\n    cheatMenu.appendChild(labelWinOption);\n    cheatMenu.appendChild(applyButton);\n    cheatMenu.appendChild(cheatMenuDesc);\n    document.body.appendChild(cheatMenu);\n\n    // Add event listener for the Apply button\n    applyButton.addEventListener('click', () => {\n      if (inputWinOption.value === 'Auto Win') {\n        this.boardLayout.forEach((row, rowIndex) => {\n          row.forEach((_, colIndex) => {\n            this.boardLayout[rowIndex][colIndex] = 2048;\n          });\n        });\n        this.updateBoardDisplay();\n      } else if (inputWinOption.value === 'Auto Lose') {\n        this.boardLayout.forEach((row, rowIndex) => {\n          row.forEach((_, colIndex) => {\n            this.boardLayout[rowIndex][colIndex] = 0;\n          });\n        });\n        this.updateBoardDisplay();\n        this.showLoseMessage();\n      }\n\n      // Remove cheat menu after applying\n      cheatMenu.remove();\n    });\n  };\n\n  // Generate number cells randomly\n  generateNewCells() {\n    const cellValue = Math.random() < 0.9 ? 2 : 4;\n\n    // Clear the emptyCells array before using it\n    this.emptyCells = [];\n\n    // Find all empty cells and store their positions in the emptyCells array\n    this.boardLayout.forEach((row, rowIndex) => {\n      row.forEach((cell, colIndex) => {\n        if (cell === 0) {\n          this.emptyCells.push({ rowIndex, colIndex });\n        }\n      });\n    });\n\n    // Check if there are empty cells\n    if (this.emptyCells.length > 0) {\n      // Randomly select one empty cell\n      const randomIndex = Math.floor(Math.random() * this.emptyCells.length);\n      const { rowIndex, colIndex } = this.emptyCells[randomIndex];\n\n      // Set the value to the randomly selected cell\n      this.boardLayout[rowIndex][colIndex] = cellValue;\n\n      // Update the DOM to reflect the change\n      this.updateBoardDisplay();\n    }\n  }\n\n  // Update Table (on page)\n  updateBoardDisplay() {\n    this.fieldRows.forEach((row, rowIndex) => {\n      const cells = Array.from(row.children);\n\n      cells.forEach((cell, colIndex) => {\n        const cellValue = this.boardLayout[rowIndex][colIndex];\n\n        cell.textContent = cellValue !== 0 ? cellValue : '';\n        cell.className = `field-cell field-cell--${cellValue}`;\n\n        // In case there is cell with 2048, show message immidietly\n        if (cellValue === 2048) {\n          this.status = 'win';\n          this.state = 'win';\n          this.totalScoreMessage.innerHTML = `Your total score is: ${this.getScore()}<br>` + 'Moves made ' + this.countMoves;\n          this.totalScoreMessage.classList.remove('hidden');\n          this.showWinMessage();\n        }\n      });\n    });\n  }\n\n  areBoardsEqual(orgBoard, currentBoard) {\n    return JSON.stringify(orgBoard) === JSON.stringify(currentBoard);\n  }\n\n  showLoseMessage() {\n    this.loseMessage.classList.remove('hidden');\n  }\n\n  showWinMessage() {\n    this.winMessage.classList.remove('hidden');\n  }\n\n  handleGameResolvment() {\n    const losePromise = new Promise((resolve) => {\n      const isLose = !this.boardLayout.some((row, rowIndex) =>\n        row.some((cell, colIndex) => {\n          // Check if there is any move possible, left or right, or up or down\n          return (\n            (colIndex < row.length - 1 &&\n              row[colIndex] === row[colIndex + 1]) ||\n            (rowIndex < this.boardLayout.length - 1 &&\n              this.boardLayout[rowIndex][colIndex] ===\n                this.boardLayout[rowIndex + 1][colIndex])\n          );\n        }));\n\n      if (isLose) {\n        resolve('lose');\n      }\n    });\n\n    losePromise.then(() => {\n      this.status = 'lose';\n      this.state = 'lose';\n      this.totalScoreMessage.innerHTML = `Your total score is: ${this.getScore()}<br>` + 'Moves made ' + this.countMoves;\n      this.totalScoreMessage.classList.remove('hidden');\n      this.showLoseMessage();\n    });\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n    } else obj[key] = value;\n\n    return obj;\n}\nexport { _define_property as _ };\n"],"names":["$cd5a47cf8ef6d766$export$71511d61b312f219","obj","key","value","Object","defineProperty","enumerable","configurable","writable","$197cd56b15c33885$var$game","protoProps","Game","_this","initialState","arguments","length","instance","Constructor","TypeError","e","state","toLowerCase","moveLeft","moveRight","moveUp","moveDown","generateNewCells","getScore","handleGameResolvment","countMoves","lastMoveDirection","document","querySelector","cheatMenu","createElement","className","cheatMenuDesc","innerHTML","labelWinOption","textContent","inputWinOption","autoWin","text","autoLose","add","appendChild","applyButton","type","body","addEventListener","boardLayout","forEach","row","rowIndex","_","colIndex","updateBoardDisplay","showLoseMessage","remove","gameField","fieldRows","Array","from","querySelectorAll","emptyCells","startMessage","loseMessage","winMessage","totalScoreMessage","controlButton","cheatButton","status","canMove","oppositeMoveDirections","left","right","up","down","moved","i","i1","j","originalBoard","JSON","parse","stringify","columns","map","column","newColumn","filter","num","mergedColumn","push","areBoardsEqual","reverse","gameScore","cellsScore","rowSum","reduce","init","currScore","curr","controlHandler","getState","startGame","classList","restart","removeEventListener","initPLayerInput","initCheats","resetInput","bindPlayerInput","resetCheats","bindCheats","handleInput","cheats","cellValue","Math","random","cell","randomIndex","floor","_this_emptyCells_randomIndex","cells","children","concat","showWinMessage","orgBoard","currentBoard","losePromise","Promise","resolve","some","then","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","prototype","start"],"version":3,"file":"index.572e9113.js.map"}